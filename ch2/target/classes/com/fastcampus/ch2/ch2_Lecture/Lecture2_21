@GetMapping과 @PostMapping
	1.@GetMapping, @PostMapping
		@RequestMapping가 너무 길어서 대신 @GetMapping, @PostMapping 사용가능
		URL이 같으면 맵핑충돌이 나는데 메소드가 다르면 충돌이 발생하지 않는다! url이 같아도 메소드로 구분이되기때문이다!
		
	2.클래스에 붙이는 @RequestMapping
		맵핑될 URL의 공통 부분을 @RequestMapping으로 클래스에 적용
		그렇게하면 메소드들 애너테이션 매개변수앞에 자동으로 붙는다. 뭐가? @RequestMapping의 매개변수가!
	
	3.@RequestMapping의 URL패턴
		@RequestMapping도 URL패턴을 사용할 수 있다. 서블릿에서는 @WebServlet을 사용했지만 스프링에서는 @RequestMapping을 사용한다. 둘이 거의 같다.
		?는 한글자, *는 여러글자, **는 하위경로 포함. 배열로 여러 패턴 지정
		URL패턴 - @WebServlet : 서블릿
			   - @RequestMapping : 스프링 
		우선순위가 있다. 정확히 일치 - 경로 맵핑 - 확장자 맵핑, 마지막까지 처리가 안되면 404 not found 뜨는것

	4.URL인코딩 - 퍼센트 인코딩
		%를 써서 퍼센트인코딩.
	 	URL인코딩 : URL에 포함된 non-ASCII문자를 문자코드(16진수) 문자열로 변환
	 	URL디코딩 : 문자코드(16진수) 문자열문자를 URL에 포함된 non-ASCII문자로 변환
	 	왜 이렇게해? 서버요청이왔을때 서버 접속은 전세계에서 가능하니까 그 요청이 어떤OS인지 어떤 인코딩인지 모르기때문에
	 	★url에 쓰이는 문자는 모두 아스키여야한다.
	 	문자코드(숫자)를 문자열로(인코딩) 문자열을 문자코드로(디코딩)
	 	URL인코딩은 BASE64와 전혀 다르다. Base64는 6비트씩 끊어서 변환하는것 즉, 바이너리데이터를 텍스트로 변환
	 	
	 	서버에 한글입력하면은 url인코딩은 브라우저가 해준다. 이 전송받은 데이터를 서버에서는 디코딩을해서 해석한다! 필수!
	 	
	 	필터가 전처리 역할을 해주어서 DS(Dispatcher Servlet)가 요청을 받기전에 한글처리를 해주는것!
	 	.m2/repository 삭제하고 메이븐-프로젝트업데이트로 다시 모듈다운로드
