관심사의 분리, MVC 패턴 - 이론
	1.관심사의 분리 Separation of Concerns
		YoilTeller클래스를 크게 3부분으로 나눌수 있다!
		입력하는부분, 요일계산하는부분, 출력하는 부분 - 이것들을 각각 관심사(해야할 작업, concern)라고 한다.
		
		OOP5대 설계원칙 - 'S'OLID
		1.'S'RP - 단일 책임의 원칙 - 하나의 메서드는 하나의 책임(관심사와 같은 뜻)만 진다. 즉 하나의 메서드에는 하나의 관심사만 있어야한다! 여러개 있으면 분리해야해!
		돌아는 가는데 좋은 설계가 아니야! 객체지향적 설계는 분리를 잘해야한다!
		분리에는 관심사의분리, 변하는것과 (자주)변하지않는것의 분리, 공통코드(중복코드)의 분리
			
	2.공통 코드의 분리-입력의분리
		Controller는 입력-처리-출력 의 과정을 거친다.
		관심사를 없앨수 있다. 입력부분을 매개변수로 옮겨서 코드내에 입력하는 내용(관심사)을 없앨 수 있음 (여기서는 입력이 비슷하다는 전제하에!)
		Controller의 매개변수 HttpServletRequest대신 입력값을 직접받는 매개변수를 작성해도 작동하는데 이상없다! 
		심지어는 String을 int로 받을 수 있다!(가능하면 자동변환을 해주기 때문에)
		
	3.출력(view)의 분리- 변하는 것과 변하지 않는 것의 분리
		mvc패턴이 Model, View, Controller의 약자이다. ★코드를 분리했기때문에 분리된 코드간의 데이터 전달을 위해서 모델이 필요한데 그게 
		바로 mvc이다! Controller와 View사이에서 필요한 데이터 전달을 해주는게 Model!! 분리된 두 코드간의 데이터를 전송하기위해서 필요한것!
		실제 작업을 처리하는 Controller, 출력하는 부분 View, 이 둘 사이의 전달 매개체 Model
		DispatcherServlet이 앞에서 입력처리를 하고 모델을만들어서(결과를 저장할 객체) 처리(컨트롤러)로보내고 처리한 결과를 다시 모델에 저장
		이 저장된 모델을 DispatcherServlet이 뷰한테 전달. 그러면 View에서는 작업 결과를 읽어서 응답을 만들어 낸뒤 클라이언트에게 전송!
		뷰가 작업한결과를 가지고 응답을 만들어내서 클라이언트에게 전송한다! - 간단히 요약하자면 이렇다. 실제로는 물론 더 복잡하다.
		
	4.MVC패턴
		DispatcherServlet이 입력&변환 작업과 모델(객체,결과저장소)를 생성!! 두가지 역할을한다.
		에러는 모델이 필요없어 그냥 에러만 보여주면 되니까.
		model에 작업결과를 저장할 때에는 map처럼 k,v로 저장한다.
		DispatcherServlet이 Model매개변수를 보면 new Model(); 실행하여 만든 뒤 Controller에 보내준다.
			Controller는 그 Model에 작업 결과를 저장하고 다시 DispatcherServlet에게 반환
		관심사를 분리하는 내용에대한 설명이 주였다! 이제 실습에서 해보자~
		