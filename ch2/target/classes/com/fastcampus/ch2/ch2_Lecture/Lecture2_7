HTTP 요청과 응답
	1.프로토콜(protocol)이란?
		서로 간의 통신을 위한 약속
		주고 받을 데이터에 대한 형식을 정의한 것
		야구 신호비유, 편지비유.
		
	2.HTTP(Hyper Text Transfer Protocol)란?
		단순하고 읽기 쉽다는 특징이 있다.
		여기서 Text=HTML 이라 생각하면 쉽다.
		텍스트 기반의 프로토콜(텍스트를 전송하기위한!)
		상태를 유지하지 않는다(stateless). - 클라이언트 정보를 저장 x
			같은 클라이언트가 요청을 두번보내도 이 요청이 같은 클라이언트가 보내는건지 알 수 없다! 서버는!
				위에 같은 상황을 보완하기 위해서 쿠키와 세션을 이용해서 클라이언트를 구분함
		확장 가능하다. - 커스텀 헤더(header) 추가 가능
			응답메시지에는 상태라인, 헤더와 바디(내용)으로 나뉨
			서버와 클라이언트가 약속만되면 우리가 헤더를 추가할수있다!(커스텀헤더 추가 가능)
			헤더는 대소문자 구분하지않는다. 공백무시~, n개 나올 수 있다.
			
	3.HTTP메시지
		편지와 HTTP 응답 메시지를 비유, 둘다 텍스트!
		상태라인-헤더-줄바꿈(바디가 있다면)-바디
		응답내용이 브라우저에 해석되서 나온다.
	
	4.HTTP메시지 - 응답메시지(형식)
		첫번째줄은 상태 라인 status line
			상태코드별 다른 의미를 가짐 ex) 100번대-정보교환 목적(잘안씀), 200번대-성공, 300번대-다른URL요청, 400~500번대-에러
			400번대 에러의 경우 클라이언트의 잘못!
			500번대 에러의 경우 서버의 잘못! 요청은 잘됬으나 서버처리중 에러가 발생한것
		헤더가 몇줄인지 정해져있는게 아님 빈줄 다음부터 바디로 친다.
		
		그냥 getYoil 호출시 500번대 에러! 입력안했을경우에 대비해서 코드를작성했는데 안해서!
		
	5.HTTP메시지 - 요청메시지
		GET,POST(요청 method)
			요청라인(첫줄)+헤더(n줄)+빈줄(이 아래로는 바디)+바디
			
			get 서버에게 리소스를 요청해서 얻어오기위함 ( for Read ) 
				그래서 바디가 없고 헤더만 있다. 
				대신 데이터를 보낼게 있으면 요청라인에 쿼리스트링을 보낸다.
				
			Post 서버에 전송할 데이터를 바디에 담고있음. ( for Write )
				로그인, 회원가입, 파일첨부 이런것들도 다 post라고 할 수 있다.
				혹은 서버에 데이터를 제공해야할때 사용
				
	6.HTTP메서드 -GET,POST
		GET
			서버의 리소스를 가져오기 위해 설계
			쿼리 스트링을 통해 데이터를 전달(소용량)
			URL에 데이터 노출되므로 보안에 취약
			데이터 공유에 유리(이미 정보가 노출되어 있기때문에)
			ex) 검색엔진에서 검색단어 전송에 이용
			
		POST
			서버에 데이터를 올리기 위해 설계됨
			전송 데이터의 크기의 제한이 없음(대용량)
			데이터를 요청 메시지의 body에 담아 전송
			보안에 유리, 데이터 공유에는 불리 ; HTTP+TLS(암호화 프로토콜) -> https:// , TLS없이는 보안에 유리하지 않다.
			ex)게시판에 글쓰기, 로그인, 회원가입
			
		post요청은 form태그를 사용해야해
		대신해서 postman이라는 확장프로그램사용해서 예시살펴봄