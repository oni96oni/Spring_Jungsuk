서블릿과 JSP
8.유효 범위(scope)와 속성(attribute)
	http의 특징 - 상태정보를 저장하지 않는다. stateless <-> stateful(상태정보를저장)
	상태정보를 저장하지 않기때문에 저장소가 필요하다! 범위에 따라서 4개의 저장소를 제공한다. ★접근 범위, 생존 기간이 다른 4개의 저장소를 가지고있다.
	저장소는 map형태로 되어있다 (key, value값)
	
	(1)pageContext 저장소 - lv(지역변수)를 저장; 기본객체(request, response) 또한 lv이다. 범위는 그 페이지 안에서만 해당하며 그 범위에서만 접근 가능( 읽기와 쓰기가 가능하다 ) ${lv}가 안돼! EL은 lv에 직접 접근할수 없기때문에 저장소에다가 저장한다. <% =lv%>는 된다. EL을 사용하려면 저장소에 먼저 저장을 해야만 한다.
	저장소에 저장했다가 읽어오는 식으로 사용해야한다.
	
	(2)application 저장소 - 접근범위는 WebApplication 전체에서 접근가능. 전체 1개만 존재한다. map형태의 저장소에다가 저장, 읽기 위해서 사용하는 메서드가 setAttribute() 쓰기(저장)용 ; getAttribute() 읽기용; 이 메서드들은 모든 저장소 공통이다.
	★여러개의 요청이 와도 같은 클라이언트의 요청인지 http는 상태를 저장하지 않기때문에 모른다! 그래서 저장소가 필요한거야!
	그래서 application에다가 id를 저장하면 map에 id와 비밀번호가 저장되는데 이것을 속성(저장소의 ket값을)이라고한다.
	application은 공통저장소! 프로그램 전체에서 사용하는 데이터를 저장할때 사용하는것이 바람직.
	application은 전체에서 공유하는 저장소이기 때문에 개별적인 아이디를 저장하기에는 좋은 저장소가 아니다. 그래서 등장한게 session
		
	(3)session은 클라이언트마다 1개씩 주어지는 개별 저장소이다. 그래서 매번 다시 로그인할 필요가 없다. 세션은 쿠키를 이용해서 이 세션객체가 어떤사람의 것인지 연결해주는 역할을 한다. 로그인하면 개별저장소가 생겼다가 로그아웃하면 개별저장소를 제거한다. ★세션에는 보통 사용자마다 사용되는 예를들어 장바구니같은것을 주로 사용. 
	세션은 사용자 수만큼의 세션이 생긴다. 그래서 최소한의 데이터만을 저장해야한다. 서버부담이 제일큰 저장소이기 때문이다. 
	
	(4)마지막 저장소는 request저장소가 있다. 요청할때마다 하나씩 생기며 서로 독립적이다. 보통은 하나의 jsp가 응답을 하는데 특이한 경우로 첫번째 jsp가 요청을 받고 본인이 응답할 수 있는게 아니어서 다른 jsp에게 request객체를 넘겨주는 경우가 있는데 그것을 forward라고 한다. 
	보통은 request객체가 하나의 jsp페이지에서 사용되고 끝나지만 하나의 jsp 페이지를 거쳐서 다른 jsp에 접근할 수 있다. (데이터를 읽거나 쓸 수 있다는 의미)
	요청이 처리되는 동안만 존재, 끝나면 없어지기 때문에 데이터부담이 적다.
	
	page간의 이동할때 session을 활용하는게 제일 편하다. 하지만 제일 부담이 크다. 가능하면 제일 부담이 적은 request를 활용하는게 좋다. 요청이 끝나고나면 자동으로 사라지니까 pageContext는 그 안에서만 사용할 수 있기 때문에 좋지않다. pageContext는 ${} (EL) 에서 사용하는정도이다.
	
	정리
	pageContext  1개 jsp페이지   jsp페이지의 시작부터 끝까지. 해당 jsp내부에서만 접근가능. 페이지당 1개 . EL때문에 쓴다!
	request 	 1+개 jsp페이지  요청의 시작부터 응답까지. 다른 jsp로 전달 가능(forward) 요청마다 1개
	session 	 n개 jsp페이지   session의 시작부터 종료까지(로그인~로그아웃) 클라이언트마다 1개 서버부담이 많다.
	application  context전체    WebApplication의 시작부터 종료까지. context내부 어디서나 접근 가능, 모든 클라이언트가 공유, context마다 1개
	
	저장할때 setAttribute(String name, object value) set과 get을 많이 사용한다!
	읽어올때 getAttribute(String name) value값 반환 
	삭제할때 removeAttribute(String name) 잠깐 썻다 삭제할때 remove사용!
	반환할때 getAttributeNames() 모든 저장된 데이터를 볼때 사용하면 편리.