데이터의 변환과 검증
	★데이터의 변환
	1.WebDataBinder
		url요청이 오면 쿼리스트링이 parameterMap으로 바뀌는데 이 값을 컨트롤러에서 넘어온값을 바인딩해주는데 WebDataBinder라는 곳에서 아래 두가지 작업을 실행한다.
		(1) 타입변환 : 쿼리스트링의 value값이 저장하려고하는 객체의 데이터타입과 같게 바꿔주고
		(2) 데이터 검증 : 데이터 타입이 일치하면 이제 입력된 값이 지정된 범위안에서 입력된것인지 확인을 하고
		결과를 BindingResult에 저장을 한다. 에러가발생해도 저장한다!
		BindingResult는 컨트롤러에다가 넘겨주어서 컨트롤러가 받은값을 가지고 판단후 실행한다.
		
	2.RegisterController에 변환기능 추가하기 - 실습
		회원가입처리하는 컨트롤러에 변환기능을 추가할것!
		이 폼에서 전송된 값을 저장하는 객체에 바인딩할때 WebDataBinder가 있어서 타입변환과 데이터 검증을 한다. 그 검증을한 자료를 쓰기위해서는 BindingResul를 매개변수에 넣어주어야 한다.
		에러 해결을 위해서 변환기사용도 가능(데이터 타입을 바꿔주는것!)
		
		스프링이 변환해준다.
		sns에서 String[] -> String
		
		★BindingResult result를 매개변수로 쓸때는 항상 우리가 바인딩할 객체 바로 뒤에 와야한다
		
		BindingResult 덕분에 예외가 발생했다고 바로 에러페이지로 가는게 아니라 컨트롤러에게 바인딩결과를 주고 컨트롤러가 알아서 처리하게끔 하는것이다!
		에러가 뜨다가 그 발생한 부분만 null뜨고 나머진 그대로 출력
		
		스프링이 제공하는 CustomDateEditor
		
		@DateTimeFormat(pattern="yyyy-MM-dd") 을 변수위에다가 붙여줌으로써 
			
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
			binder.registerCustomEditor(Date.class, new CustomDateEditor(df,false));
			
			이 두줄을 생략해도 되게되었다.
			
		@InitBinder 붙은 메서드는 컨트롤러 내에서만 적용이된다.
		
		지금까지 해본 실습은 날짜 변환 형식을 지정해 보았다.
			1. @InitBinder붙은 메서드를 컨트롤러 안에다가 작성을 해서 날짜 변환 형식을 직접 지정해줌
			2. @DateTimeFormat(pattern="yyyy-MM-dd") 애너테이션 사용!
			
	3.PropertyEditor
		PropertyEditor - 양방향 타입변환 (String -> 다른 타입, 다른 타입 -> String)
			특정 타입이나 이름의 필드에 적용 가능
		
		디폴트 PropertyEditor - 스프링이 기본적으로 제공
		커스텀 PropertyEditor - 사용자가 직접 구현. PropertyEditorSupport를 상속해서 만들면 편리하다.
		
		모든 컨트롤러 내애세의 변환 - WebBindingInitializer를 구현후 등록
		특정 컨트롤러 내에서의 변환 - 컨트롤러에 @InitBinder가 붙은 메서드를 작성
		
	4.converter와 ConversionService
		Converter - 단방향 타입 변환 (타입 A -> 타입 B)
			PropertyEditor의 단점을 개선 (stateful -> stateless)
			이름에서도 알 수 있듯이 Property는 인스턴스변수를 의미한다! JavaBeans는 기술에서 왔다. JavaBeans는 특별한 자바객체! 자바빈즈의 인스턴스 변수를 프로퍼티라고 하는것. 즉 iv를 사용해서 stateful이다. converter는 iv를 안써서 stateless이다.
			iv가 있다는 뜻은 싱글톤으로 사용할 수 없다. 그래서 변환할때 마다 새로운 객체를 계속 만들어야 한다.
			
			converter라는 인터페이스가 있다. 첫번째 매개변수를 두번째 매개변수로 변환.
			
		ConversionService - 타입 변환 서비스를 제공. 여러 Converter를 등록해놓은것!
		
			WebDataBinder에 DefaultFormattingConversionService가 기본 등록
			
			모든 컨트롤러 내애세의 변환 - ConfigurableWebBindingInitializer를 설정해서 사용
			특정 컨트롤러 내에서의 변환 - 컨트롤러에 @InitBinder가 붙은 메서드를 작성
			
	5.Formatter
		Formatter -  양방향 타입 변환 (String -> 다른 타입, 다른 타입 -> String)
		바인딩할 필드에 적용 - @NumberFormat, @DateTimeFormat을 사용
		
	현재까지 배운것 정리!
		1.	PropertyEditor	 양방향, 
		2.	Converter		 단방향, 
		3. 	Formatter		 양방향, 
		
	정리 : 타입 변환기에 등록할 수 있는 3가지!
	1. CustomPropertyEditor
	2. ConversionService
	3. DefaultPropertyEditor 이것 또한 PropertyEditor이다.
	
	우선순위 항상 1번 우리가 등록한게 제일 먼저 변환! 안되면 2번에 등록된 컨버터들에 의해서 변환 그것도 안되면 3번