HTTP 요청과 응답
	7.텍스트 파일VS바이너리 파일
		바이너리 파일: 문자와 숫자가 저장되어 있는 파일
		텍스트 파일: 문자만 저장되어 있는 파일
		data는 크게 문자와 숫자로 나뉜다고 생각하자.
		메모장 열었을때 우리가 읽을 수 있으면 텍스트파일, 읽을 수 없으면 바이너리파일!
		
		바이너리 파일 : 데이터를 있는 그대로 읽고 쓴다.
			쓰기 : 문자->문자, 숫자->숫자
			읽기 : 문자->문자, 숫자->숫자
		텍스트 파일 : 숫자를 문자로 변환 후 쓴다.
			쓰기 : 문자->문자, 숫자->문자 (변환)
			읽기 : 문자->문자, 문자->숫자(x) (전부 문자로 저장하므로 문자를 숫자로 바꾸는 일은 없다!)
				숫자->문자 변환 후 저장 ex) 숫자 12를 문자 '1''2'로 저장 , 4byte -> 2byte
				byte가 무조건 유리하게 되는것은 아님! 타입 float같은 경우 byte가 더 늘어나기도 한다.(4byte->6byte)
				이렇게 변환해서 저장하기 때문에 열었을 때 사람이 읽기 쉽다! <-> 바이너리 파일은 읽기 힘들어
				
	8.MIME(Multipurpose Internet Mail Extension)
		원래는 email쪽에서 온거
		텍스트 기반 프로토콜에 바이너리 파일(이미지,동영상 등) 전송하기 위해 고안
		HTTP의 Content-Type헤더에 사용. ★전송할 데이터의 타입을 명시, 타입/서브타입존재
		내가 보내는 데이터가 바이너리파일인지 텍스트파일인지 구분! 더 상세하게는 텍스트에서도 html/css/javascript등 세세하게 서브타입도 지정 가능하다.
		
	9.Base64
		64진법! 2진법은 Base2:0,1 Base10:0~9
		a~z:26개, A~Z:26개, 0~9:10개, +,/ :2개 
		★바이너리 데이터를 텍스트 데이터로 변환할 때 사용
		모두 64개(6bit)의 문자로 구성! 특수문자,개행문자 등등 다 제외하고 공통문자만뽑았을때 6bit, OS마다 다른 인코딩이 다른경우가 발생할 일이 없다.
		Base64진법으로 인코딩을하면 문자구성이 64개로만 이루어져있다.
		6bit가 8bit가 된다(UTF-8에서는 영문자,숫자 하나가 1byte)
		그래서 데이터가 늘어난다는 단점존재. 대신 안전하게 데이터 전달가능하다는 장점!
		
		바이너리 기반의 데이터를 텍스트 기반인 HTTP protocol에 보내려면 방법은
			1.MIME을 사용
			2.바이너리를 텍스트로 변환해서 보낸다.
		
		vscode를 활용 사진 image파일을 64진법화시켜서 html로 만들어서 사이트에 업로드해보기
		파일 깨짐 걱정을 안해도됨! base64encode를 활용해서
		
		
	