쿠키(Cookie)란?
	쿠키를 이용해서 로그인 아이디를 기억해보는 작업!
	
	private boolean loginCheck(String id, String pwd) {
		return "asdf".equals(id) && "1234".equals(pwd);
	}
	여기서 id.equals("asdf")가 아니라 "asdf".equals(id)를 사용한 이유는 null을 따로 체크를 안해줘도 된다! 위에 방식을 이용하면
	
	1.쿠키란?
		이름과 값의 쌍으로 구성된 작은 정보. 아스키 문자만 가능
		name과 value를 한쌍으로 저장하는것이 쿠키이다. 이 외에도 유효기간도 존재 (이 정보의 유효기간), 세미콜론 공백 사용 x, 한글은 url인코딩 해주어야해
		
		서버에서 생성 후 전송, ★브라우저에 저장! 유효기간 이후 자동 삭제 -> 쿠키를 저장하는 공간이 브라우저이다!
		
		서버에 요청시 domain, path(하위경로 포함)가 일치하는 경우에만 자동 전송! 쿠키는 여러 개 있을 수 있어.
		쿠키 중에서 해당 사이트 경로에 해당하는것들은 자동으로 쿠키가 간다. (하위 경로에 해당하는 곳까지 쿠키가 간다.)
	
	2.쿠키의 작동 과정
		클라이언트가 서버에 요청 -> 서버에서 쿠키를 만들고 응답(response.addCookie)에다가 담아서 보낸다.
		이 응답이 클라이언트에게 전달이 되면서 쿠키도 같이 간다. 서버가 보낸 쿠키가 (클라이언트의)브라우저에 저장
		다음번에 클라이언트가 서버에 요청을 할때 도메인이 일치하는 쿠키가 있으면 쿠키가 같이 요청에 실려서 서버로 보내진다.
		
		예시) 서버는 도서관! 처음갔을때 id카드 발급, 다음부터는 id카드로 책 대여하잖아. 다른 카드(신분증 같은) 로는 도서관에서 책 대여가 안돼!
		
		사용자가 쿠키 삭제가능, 서버가 발급하는 쿠키 거부가능. 내컴퓨터에 저장하니까! 내마음대로 할 수 있다.
		
		★쿠키는 클라이언트를 구별하기 위한 기술이다! 
		서버는 누구한테서 요청이 오든 응답만 해주면 되는데 특별한 경우 클라이언트를 식별해야할 때가 있다. 그럴때 쿠키를 사용!
		
	3.쿠키의 생성
		Cookie cookie = new Cookie("id","asdf"); //쿠키 생성, name-value를 쌍으로 가진다.
		cookie.setMaxAge(60*60*24); 			 //유효기간 설정(초), 상대시간 절대시간 둘다 존재
		response.addCookie(cookie) 				 //응답에 쿠키 추가
		
		클라이언트가 요청할때 쿠키가 같이 따라가면 헤더에 한줄 추가된다. 쿠키의 정보들
		
		이 응답이 가면 브라우저에 쿠키가 만들어지는것
		
		max-age : 상대시간 , Expires : 절대시간
		
	4.쿠키의 삭제와 변경
		쿠키를 삭제하는것은 유효기간을 0으로 만드는것!
		
		쿠키의 삭제
		Cookie cookie = new Cookie("id",""); 	//변경할 쿠키와 같은 이름 쿠키 생성한 다음에!
		cookie.setMaxAge(0); 			 		//유효기간을 0으로 설정(삭제)
		response.addCookie(cookie) 				//응답에 쿠키 추가
		
		쿠키의 변경
		Cookie cookie = new Cookie("id",""); 		//변경할 쿠키와 같은 이름 쿠키 생성한다음에!
		cookie.setValue(URLEncoder.encode("남궁성")); //값의 변경, 한글같은경우에는 encoding 한다음에 값을 넣어야해! 꺼낼때는 반대로 decoding필수
		cookie.setDomain("www.fastcampus.co.kr"); 	//도메인의 변경
		cookie.setPath("/ch2");						//경로의 변경
		cookie.setMaxaaAge(60*60*24*7); 			//유효기간의 변경
		response.addCookie(cookie)  				//응답에 쿠키추가, response(응답)는 빼먹지말고 반드시!
		
		name, value외에도 domain, path, maxage등이 있다. 이런것들 설정 안해주면 서버에 응답에 따라서 클라이언트가 알아서 저장
		
	5.쿠키 읽어 오기
		Cookie[] cookies = request.getCookies(); //쿠키 읽기
		
		for(Cookie cookie : cookies) {
			String name = cooke.getName();
			String value = cookie.getValue();
			
			System.out.printf("[cookie]name=%s, value=%s%n", name, value);
		}
		
		쿠키가 여러개일 수 있으니까 Cookie[]로 되어있다.
		
		쿠키를 구분하는 방법은 응답헤더에서 url에있는 path와 쿠키에 저장되어있는 경로비교, Host와 저장되어 있는 domain비교등을 한다.
		
		서버입장에서 요청이 오면 브라우저는 가지고있는 쿠키 같이 보낸다. 그 요청에서 domain과 path가 일치하는 쿠키를 찾아서 읽는다!
		쿠키가 없으면 null
		
	실습.쿠키를 이용해서 로그인창에서 id를 기억하는방법 구현해보자
		쿠키가 있으면
			id 뿌려주고 ->  value="asdf" 추가
			아이디 기억체크 -> checkbox input태그에 checked 추가
			
		쿠키가 없으면
			할일 x
		
		구현할 작업이 있을때 미리 결과를 만들어 본다음에 하는 방법도 좋다.
		하드코딩은 안돼. 쿠키를 가져올때는 EL을 사용하면 편리해요!
		
		${cookie.id.value} 쿠키중에서 이름이 id인 value를 가져온다.
		${empty cookie.id.value ? "":"checked"} 쿠키가 있으면 checked 없으면 빠지게
		
		쿠키는 브라우저에서 직접 만들수도 있어!
			개발자도구 - 애플리케이션 탭 - 쿠키 더블클릭하고 id-value 적어주면 다음부터는 그 쿠키를 이용한다.
			
		sts에서 만들어보자!
			id/pwd/rememberID 시스템프린트로 찍어봤을때 String rememberId 였을때는 안찍혔는데 
			boolean으로 타입변경 + jsp파일에 기본 value="on" 넣어주니까 출력이 잘 찍히네 뭐지
			체크박스에 value가 없어 (loginFrom.jsp에서) 없으면 기본적으로는 on 그래서 String으로 출력 찍어봤을때 on이 나온것.

LoginController.java			