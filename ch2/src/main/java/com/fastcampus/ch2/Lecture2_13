서블릿과 JSP
	JSP==서블릿 -> 서블릿 발전시킨게 Spring
	1.서블릿과 컨트롤러의 비교
		DispatcherServlet이 서블릿이다.
		서블릿에서는 request와 response 매개변수가 고정! 항상 들어가야해
		printWriter때문에 에러잡기위해서 throws IOException 넣어준다.
		HttpServlet상속받는다.
		컨트롤러가 더 발전된 모습을 보여주는것! (상속도 안받고, 새로운 메서드를 만들기만하면 또다른 맵핑을 할수가있는점 등)
		
	2.서블릿의 생명주기
		서블릿은 기본적으로 3개 매서드를 가진다 
			init() - 서블릿 초기화
			service() - 실제 작업처리
			destroy() - 서블릿 제거될때, 단 한번만 수행
			우리가 직접호출은 안하고 ServletContainer가 자동호출을 하기때문에, 우리는 이 메서드의 내용만 채워주면 된다.
		
		요청이오면 Servlet Conetxt에서 서블릿 인스턴스가 존재하는지 확인하고 있으면 바로 service()메서드를 호출한다. 없으면 서블릿클래스 로딩 & 인스턴스 생성하고 init() - service() 메서드로 응답한다. 종료되면 그때 destroy() 실행 서블릿 인스턴스가 존재하면 바로 service()메서드로 간다.
		서블릿이나 스프링이나 하나의 객체를만들어서 요청을 처리하는것! 요청이 올때마다 객체를 생성하는 것이 아니다.
	
		서블릿은 기본적으로 싱글톤 패턴! 한개의 인스턴스만 만들어진다. 한개의 인스턴스를 재활용, 요청이 올때마다 새로만드는것이 아니다. 스프링도 마찬가지고
	
	3.JSP(Java Server Pages)란? 서블릿과 동일하다!
		jsp작성하면 서블릿으로 자동으로 변환이되는것이다.
		★jsp란 html안에 자바코드가 있는것!, <% ~ %> 안에 자바코드가 들어가있는 형태 - 지역변수 메서드안에 들어간다. 인스턴스변수,클래스변수가 필요할때는 <%! ~ %> 이런 형태안에 작성하면 메서드안으로 들어가는것이 아니라 클래스안으로 들어간다.
		jsp파일 저장은 src/main/webapp에다가 한다.
	
	4.JSP와 서블릿의 비교
		jsp가 서블릿으로 변환이된다.
		html안에 자바코드가있는것이 jsp다! <% ~ %>이 안에다가 넣는다.
	
	5.JSP의 호출과정
		*.jsp 요청이 들어오면 jsp서블릿이 무조건 다 받는다. 그 뒤에 ★서블릿 인스턴스가 존재하는지 확인 없으면 jsp를 서블릿으로 변환 ( .java 파일로 변경된다) 그 다음에 컴파일해서 .class파일로 바뀐다. 클래스파일로 서블릿 객체를 만든다. 이때 초기화 메서드가 호출된다 _jspInit() 그 다음에 만들어진 서블릿 인스턴스로 응답한다.
		첫번째 호출은 변환하고 컴파일하는데 시간지연이 걸린다. 두번째 호출부터는 객체가 존재하니까 변환할필요가 없으므로 바로 서비스메서드가 응답해주기에 빠르다!
		jsp가 변경되면 다시 변환하고 컴파일한다. 
		서블릿은 늦은 초기화(lazy init)가 기본이다. 그래서 스프링은 개선을 위해서 early init사용 둘다 싱글톤을 사용! 초기화에있어서 차이가있다.
		스프링은 요청이 오지않아도 미리 객체를 만들어놓고 초기화하는 방법이다! 
		
	6.JSP와 서블릿으로 변환된 JSP의 비교
		twoDice.jsp - > twoDice_jsp.java 로 바뀐다 ( 서블릿으로 변환된것 ) 
		
	7.JSP의 기본객체
		JSP에는 기본객체라는것이 있는데 생성하지 않고 사용할 수 있는 객체가 있다! 
		request같은것은 선언부도없고 생성도없어도 바로 사용이 가능하다. + pageContext, response, session, application config, out, page등등이 있다. ( service()에 지역변수로 선언되있는 녀석들이다 ) 
		이것들은 lv이다(지역변수)
		가능한 이유가 서비스 메서드의 지역변수로 다 선언되어 있기때문에 사용이 가능한것.
		
		